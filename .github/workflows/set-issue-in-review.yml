# Based on https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/automating-projects-using-actions
name: ðŸ—‚ Set issue status
on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, edited, ready_for_review, synchronize]
jobs:
  track_pr:
    name: Set to ðŸ‘€ In Review
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
          USER: ${{github.repository_owner}}
          PROJECT_NUMBER: 2
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          gh api graphql -f query='
            query($user: String!, $number: Int!, $pr:ID!) {
              node(id: $pr) {
                ... on PullRequest {
                  closingIssuesReferences(first:1, userLinkedOnly:false) {
                    nodes {
                      projectItems(first:1) {
                        nodes {
                          id
                        }
                      }
                    }
                  }
                }
              }
              user(login: $user){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -F number=$PROJECT_NUMBER -f pr=$PR_ID > project_data.json

          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          # Using jq -r here because IN_REVIEW_OPTION_ID is an Int and we need to keep it like that instead of letting jq return a String
          echo 'IN_REVIEW_OPTION_ID='$(jq -r '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="ðŸ‘€ In review") |.id' project_data.json) >> $GITHUB_ENV
          echo 'LINKED_ISSUE_ID='$(jq '.data.node.closingIssuesReferences.nodes[0].projectItems.nodes[0].id' project_data.json) >> $GITHUB_ENV

      - name: Move to ðŸ‘€ In review
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$LINKED_ISSUE_ID -f status_field=$STATUS_FIELD_ID -f status_value=$IN_REVIEW_OPTION_ID
