{
  "version": 3,
  "sources": ["../../../app/routes/_auth+/onboarding.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/onboarding.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/onboarding.tsx\");\n  import.meta.hot.lastModified = \"1714001434573.415\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { invariant } from \"@epic-web/invariant\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useSearchParams } from \"@remix-run/react\";\nimport { HoneypotInputs } from \"remix-utils/honeypot/react\";\nimport { safeRedirect } from \"remix-utils/safe-redirect\";\nimport { z } from \"zod\";\nimport { CheckboxField, ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { Spacer } from \"#app/components/spacer.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { requireAnonymous, sessionKey, signup } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { checkHoneypot } from \"#app/utils/honeypot.server.ts\";\nimport { useIsPending } from \"#app/utils/misc.tsx\";\nimport { authSessionStorage } from \"#app/utils/session.server.ts\";\nimport { redirectWithToast } from \"#app/utils/toast.server.ts\";\nimport { NameSchema, PasswordAndConfirmPasswordSchema, UsernameSchema } from \"#app/utils/user-validation.ts\";\nimport { verifySessionStorage } from \"#app/utils/verification.server.ts\";\nexport const onboardingEmailSessionKey = \"onboardingEmail\";\nconst SignupFormSchema = z.object({\n  username: UsernameSchema,\n  name: NameSchema,\n  agreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n    required_error: \"You must agree to the terms of service and privacy policy\"\n  }),\n  remember: z.boolean().optional(),\n  redirectTo: z.string().optional()\n}).and(PasswordAndConfirmPasswordSchema);\n_c = SignupFormSchema;\nasync function requireOnboardingEmail(request) {\n  await requireAnonymous(request);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get(\"cookie\"));\n  const email = verifySession.get(onboardingEmailSessionKey);\n  if (typeof email !== \"string\" || !email) {\n    throw redirect(\"/signup\");\n  }\n  return email;\n}\nexport async function loader({\n  request\n}) {\n  const email = await requireOnboardingEmail(request);\n  return json({\n    email\n  });\n}\nexport async function action({\n  request\n}) {\n  const email = await requireOnboardingEmail(request);\n  const formData = await request.formData();\n  checkHoneypot(formData);\n  const submission = await parseWithZod(formData, {\n    schema: intent => SignupFormSchema.superRefine(async (data, ctx) => {\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          username: data.username\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUser) {\n        ctx.addIssue({\n          path: [\"username\"],\n          code: z.ZodIssueCode.custom,\n          message: \"A user already exists with this username\"\n        });\n        return;\n      }\n    }).transform(async data => {\n      if (intent !== null) {\n        return {\n          ...data,\n          session: null\n        };\n      }\n      const session = await signup({\n        ...data,\n        email\n      });\n      return {\n        ...data,\n        session\n      };\n    }),\n    async: true\n  });\n  if (submission.status !== \"success\" || !submission.value.session) {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    session,\n    remember,\n    redirectTo\n  } = submission.value;\n  const authSession = await authSessionStorage.getSession(request.headers.get(\"cookie\"));\n  authSession.set(sessionKey, session.id);\n  const verifySession = await verifySessionStorage.getSession();\n  const headers = new Headers();\n  headers.append(\"set-cookie\", await authSessionStorage.commitSession(authSession, {\n    expires: remember ? session.expirationDate : undefined\n  }));\n  headers.append(\"set-cookie\", await verifySessionStorage.destroySession(verifySession));\n  return redirectWithToast(safeRedirect(redirectTo), {\n    title: \"Welcome\",\n    description: \"Thanks for signing up!\"\n  }, {\n    headers\n  });\n}\nexport async function handleVerification({\n  submission\n}) {\n  invariant(submission.status === \"success\", \"Submission should be successful by now\");\n  const verifySession = await verifySessionStorage.getSession();\n  verifySession.set(onboardingEmailSessionKey, submission.value.target);\n  return redirect(\"/onboarding\", {\n    headers: {\n      \"set-cookie\": await verifySessionStorage.commitSession(verifySession)\n    }\n  });\n}\nexport const meta = () => {\n  return [{\n    title: \"Setup Epic Notes Account\"\n  }];\n};\nexport default function SignupRoute() {\n  _s();\n  const data = useLoaderData();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\");\n  const [form, fields] = useForm({\n    id: \"onboarding-form\",\n    constraint: getZodConstraint(SignupFormSchema),\n    defaultValue: {\n      redirectTo\n    },\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: SignupFormSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <div className=\"container flex min-h-full flex-col justify-center pb-32 pt-20\">\n      <div className=\"mx-auto w-full max-w-lg\">\n        <div className=\"flex flex-col gap-3 text-center\">\n          <h1 className=\"text-h1\">Welcome aboard {data.email}!</h1>\n          <p className=\"text-body-md text-muted-foreground\">\n            Please enter your details.\n          </p>\n        </div>\n        <Spacer size=\"xs\" />\n        <Form className=\"mx-auto min-w-full max-w-sm sm:min-w-[368px]\" method=\"POST\" {...getFormProps(form)}>\n          <HoneypotInputs />\n          <Field errors={fields.username.errors} inputProps={{\n          ...getInputProps(fields.username, {\n            type: \"text\"\n          }),\n          autoComplete: \"username\",\n          className: \"lowercase\"\n        }} labelProps={{\n          htmlFor: fields.username.id,\n          children: \"Username\"\n        }} />\n          <Field errors={fields.name.errors} inputProps={{\n          ...getInputProps(fields.name, {\n            type: \"text\"\n          }),\n          autoComplete: \"name\"\n        }} labelProps={{\n          htmlFor: fields.name.id,\n          children: \"Name\"\n        }} />\n          <Field errors={fields.password.errors} inputProps={{\n          ...getInputProps(fields.password, {\n            type: \"password\"\n          }),\n          autoComplete: \"new-password\"\n        }} labelProps={{\n          htmlFor: fields.password.id,\n          children: \"Password\"\n        }} />\n\n          <Field errors={fields.confirmPassword.errors} inputProps={{\n          ...getInputProps(fields.confirmPassword, {\n            type: \"password\"\n          }),\n          autoComplete: \"new-password\"\n        }} labelProps={{\n          htmlFor: fields.confirmPassword.id,\n          children: \"Confirm Password\"\n        }} />\n\n          <CheckboxField\n        // @ts-expect-error Radix Checkbox requires <button />-specific 'type' but conform returns broader `<input />-type`.\n        buttonProps={getInputProps(fields.agreeToTermsOfServiceAndPrivacyPolicy, {\n          type: \"checkbox\"\n        })} errors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors} labelProps={{\n          htmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n          children: \"Do you agree to our Terms of Service and Privacy Policy?\"\n        }} />\n          <CheckboxField\n        // @ts-expect-error Radix Checkbox requires <button />-specific 'type' but conform returns broader `<input />-type`.\n        buttonProps={getInputProps(fields.remember, {\n          type: \"checkbox\"\n        })} errors={fields.remember.errors} labelProps={{\n          htmlFor: fields.remember.id,\n          children: \"Remember me\"\n        }} />\n\n          <input {...getInputProps(fields.redirectTo, {\n          type: \"hidden\"\n        })} />\n          <ErrorList errors={form.errors} id={form.errorId} />\n\n          <div className=\"flex items-center justify-between gap-6\">\n            <StatusButton className=\"w-full\" disabled={isPending} status={isPending ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n              Create an account\n            </StatusButton>\n          </div>\n        </Form>\n      </div>\n    </div>;\n}\n_s(SignupRoute, \"SbEzVWUNyTwM/qcAIjF6pChQLW8=\", false, function () {\n  return [useLoaderData, useActionData, useIsPending, useSearchParams, useForm];\n});\n_c2 = SignupRoute;\nvar _c, _c2;\n$RefreshReg$(_c, \"SignupFormSchema\");\n$RefreshReg$(_c2, \"SignupRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
