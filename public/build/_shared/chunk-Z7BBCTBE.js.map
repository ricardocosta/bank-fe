{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@epic-web+invariant@1.0.0/node_modules/@epic-web/invariant/dist/index.js"],
  "sourcesContent": ["export class InvariantError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, InvariantError.prototype);\n    }\n}\n/**\n * Provide a condition and if that condition is falsey, this throws an error\n * with the given message.\n *\n * inspired by invariant from 'tiny-invariant' except will still include the\n * message in production.\n *\n * @example\n * invariant(typeof value === 'string', `value must be a string`)\n *\n * @param condition The condition to check\n * @param message The message to throw (or a callback to generate the message)\n * @param responseInit Additional response init options if a response is thrown\n *\n * @throws {InvariantError} if condition is falsey\n */\nexport function invariant(condition, message) {\n    if (!condition) {\n        throw new InvariantError(typeof message === 'function' ? message() : message);\n    }\n}\n/**\n * Provide a condition and if that condition is falsey, this throws a 400\n * Response with the given message.\n *\n * inspired by invariant from 'tiny-invariant'\n *\n * @example\n * invariantResponse(typeof value === 'string', `value must be a string`)\n *\n * @param condition The condition to check\n * @param message The message to throw (or a callback to generate the message)\n * @param responseInit Additional response init options if a response is thrown\n *\n * @throws {Response} if condition is falsey\n */\nexport function invariantResponse(condition, message, responseInit) {\n    if (!condition) {\n        throw new Response(typeof message === 'function' ? message() : message, {\n            status: 400,\n            ...responseInit,\n        });\n    }\n}\n"],
  "mappings": ";AAAO,IAAM,iBAAN,MAAM,wBAAuB,MAAM;AAAA,EACtC,YAAY,SAAS;AACjB,UAAM,OAAO;AACb,WAAO,eAAe,MAAM,gBAAe,SAAS;AAAA,EACxD;AACJ;AAiBO,SAAS,UAAU,WAAW,SAAS;AAC1C,MAAI,CAAC,WAAW;AACZ,UAAM,IAAI,eAAe,OAAO,YAAY,aAAa,QAAQ,IAAI,OAAO;AAAA,EAChF;AACJ;",
  "names": []
}
