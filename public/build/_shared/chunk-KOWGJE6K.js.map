{
  "version": 3,
  "sources": ["../../../app/routes/_auth+/reset-password.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/reset-password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/reset-password.tsx\");\n  import.meta.hot.lastModified = \"1714001208522.799\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { invariant } from \"@epic-web/invariant\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport { GeneralErrorBoundary } from \"#app/components/error-boundary.tsx\";\nimport { ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { requireAnonymous, resetUserPassword } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { useIsPending } from \"#app/utils/misc.tsx\";\nimport { PasswordAndConfirmPasswordSchema } from \"#app/utils/user-validation.ts\";\nimport { verifySessionStorage } from \"#app/utils/verification.server.ts\";\nexport const resetPasswordUsernameSessionKey = \"resetPasswordUsername\";\nexport async function handleVerification({\n  submission\n}) {\n  invariant(submission.status === \"success\", \"Submission should be successful by now\");\n  const target = submission.value.target;\n  const user = await prisma.user.findFirst({\n    where: {\n      OR: [{\n        email: target\n      }, {\n        username: target\n      }]\n    },\n    select: {\n      email: true,\n      username: true\n    }\n  });\n\n  // we don't want to say the user is not found if the email is not found\n  // because that would allow an attacker to check if an email is registered\n  if (!user) {\n    return json({\n      result: submission.reply({\n        fieldErrors: {\n          code: [\"Invalid code\"]\n        }\n      })\n    }, {\n      status: 400\n    });\n  }\n  const verifySession = await verifySessionStorage.getSession();\n  verifySession.set(resetPasswordUsernameSessionKey, user.username);\n  return redirect(\"/reset-password\", {\n    headers: {\n      \"set-cookie\": await verifySessionStorage.commitSession(verifySession)\n    }\n  });\n}\nconst ResetPasswordSchema = PasswordAndConfirmPasswordSchema;\nasync function requireResetPasswordUsername(request) {\n  await requireAnonymous(request);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get(\"cookie\"));\n  const resetPasswordUsername = verifySession.get(resetPasswordUsernameSessionKey);\n  if (typeof resetPasswordUsername !== \"string\" || !resetPasswordUsername) {\n    throw redirect(\"/login\");\n  }\n  return resetPasswordUsername;\n}\nexport async function loader({\n  request\n}) {\n  const resetPasswordUsername = await requireResetPasswordUsername(request);\n  return json({\n    resetPasswordUsername\n  });\n}\nexport async function action({\n  request\n}) {\n  const resetPasswordUsername = await requireResetPasswordUsername(request);\n  const formData = await request.formData();\n  const submission = parseWithZod(formData, {\n    schema: ResetPasswordSchema\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    password\n  } = submission.value;\n  await resetUserPassword({\n    username: resetPasswordUsername,\n    password\n  });\n  const verifySession = await verifySessionStorage.getSession();\n  return redirect(\"/login\", {\n    headers: {\n      \"set-cookie\": await verifySessionStorage.destroySession(verifySession)\n    }\n  });\n}\nexport const meta = () => {\n  return [{\n    title: \"Reset Password | Epic Notes\"\n  }];\n};\nexport default function ResetPasswordPage() {\n  _s();\n  const data = useLoaderData();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [form, fields] = useForm({\n    id: \"reset-password\",\n    constraint: getZodConstraint(ResetPasswordSchema),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: ResetPasswordSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <div className=\"container flex flex-col justify-center pb-32 pt-20\">\n      <div className=\"text-center\">\n        <h1 className=\"text-h1\">Password Reset</h1>\n        <p className=\"mt-3 text-body-md text-muted-foreground\">\n          Hi, {data.resetPasswordUsername}. No worries. It happens all the time.\n        </p>\n      </div>\n      <div className=\"mx-auto mt-16 min-w-[368px] max-w-sm\">\n        <Form method=\"POST\" {...getFormProps(form)}>\n          <Field errors={fields.password.errors} inputProps={{\n          ...getInputProps(fields.password, {\n            type: \"password\"\n          }),\n          autoComplete: \"new-password\",\n          autoFocus: true\n        }} labelProps={{\n          htmlFor: fields.password.id,\n          children: \"New Password\"\n        }} />\n          <Field errors={fields.confirmPassword.errors} inputProps={{\n          ...getInputProps(fields.confirmPassword, {\n            type: \"password\"\n          }),\n          autoComplete: \"new-password\"\n        }} labelProps={{\n          htmlFor: fields.confirmPassword.id,\n          children: \"Confirm Password\"\n        }} />\n\n          <ErrorList errors={form.errors} id={form.errorId} />\n\n          <StatusButton className=\"w-full\" disabled={isPending} status={isPending ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n            Reset password\n          </StatusButton>\n        </Form>\n      </div>\n    </div>;\n}\n_s(ResetPasswordPage, \"LlpdpXx3F0DiRi9p4RwyMUO3ZDI=\", false, function () {\n  return [useLoaderData, useActionData, useIsPending, useForm];\n});\n_c = ResetPasswordPage;\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c2 = ErrorBoundary;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetPasswordPage\");\n$RefreshReg$(_c2, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
