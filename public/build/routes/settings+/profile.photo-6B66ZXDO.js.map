{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.photo.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.photo.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.photo.tsx\");\n  import.meta.hot.lastModified = \"1713999420043.8076\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { invariantResponse } from \"@epic-web/invariant\";\nimport { json, redirect, unstable_createMemoryUploadHandler, unstable_parseMultipartFormData } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { z } from \"zod\";\nimport { ErrorList } from \"#app/components/forms.tsx\";\nimport { Button } from \"#app/components/ui/button.tsx\";\nimport { Icon } from \"#app/components/ui/icon.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { requireUserId } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { getUserImgSrc, useDoubleCheck, useIsPending } from \"#app/utils/misc.tsx\";\nexport const handle = {\n  breadcrumb: <Icon name=\"avatar\">Photo</Icon>\n};\nconst MAX_SIZE = 1024 * 1024 * 3; // 3MB\n\nconst DeleteImageSchema = z.object({\n  intent: z.literal(\"delete\")\n});\nconst NewImageSchema = z.object({\n  intent: z.literal(\"submit\"),\n  photoFile: z.instanceof(File).refine(file => file.size > 0, \"Image is required\").refine(file => file.size <= MAX_SIZE, \"Image size must be less than 3MB\")\n});\nconst PhotoFormSchema = z.discriminatedUnion(\"intent\", [DeleteImageSchema, NewImageSchema]);\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const user = await prisma.user.findUnique({\n    where: {\n      id: userId\n    },\n    select: {\n      id: true,\n      name: true,\n      username: true,\n      image: {\n        select: {\n          id: true\n        }\n      }\n    }\n  });\n  invariantResponse(user, \"User not found\", {\n    status: 404\n  });\n  return json({\n    user\n  });\n}\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const formData = await unstable_parseMultipartFormData(request, unstable_createMemoryUploadHandler({\n    maxPartSize: MAX_SIZE\n  }));\n  const submission = await parseWithZod(formData, {\n    schema: PhotoFormSchema.transform(async data => {\n      if (data.intent === \"delete\") {\n        return {\n          intent: \"delete\"\n        };\n      }\n      if (data.photoFile.size <= 0) {\n        return z.NEVER;\n      }\n      return {\n        intent: data.intent,\n        image: {\n          contentType: data.photoFile.type,\n          blob: Buffer.from(await data.photoFile.arrayBuffer())\n        }\n      };\n    }),\n    async: true\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    image,\n    intent\n  } = submission.value;\n  if (intent === \"delete\") {\n    await prisma.userImage.deleteMany({\n      where: {\n        userId\n      }\n    });\n    return redirect(\"/settings/profile\");\n  }\n  await prisma.$transaction(async $prisma => {\n    await $prisma.userImage.deleteMany({\n      where: {\n        userId\n      }\n    });\n    await $prisma.user.update({\n      where: {\n        id: userId\n      },\n      data: {\n        image: {\n          create: image\n        }\n      }\n    });\n  });\n  return redirect(\"/settings/profile\");\n}\nexport default function PhotoRoute() {\n  _s();\n  const data = useLoaderData();\n  const doubleCheckDeleteImage = useDoubleCheck();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const [form, fields] = useForm({\n    id: \"profile-photo\",\n    constraint: getZodConstraint(PhotoFormSchema),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: PhotoFormSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  const isPending = useIsPending();\n  const pendingIntent = isPending ? navigation.formData?.get(\"intent\") : null;\n  const lastSubmissionIntent = fields.intent.value;\n  const [newImageSrc, setNewImageSrc] = useState(null);\n  return <div>\n      <Form className=\"flex flex-col items-center justify-center gap-10\" encType=\"multipart/form-data\" method=\"POST\" onReset={() => setNewImageSrc(null)} {...getFormProps(form)}>\n        <img alt={data.user?.name ?? data.user?.username} className=\"h-52 w-52 rounded-full object-cover\" src={newImageSrc ?? (data.user ? getUserImgSrc(data.user.image?.id) : \"\")} />\n        <ErrorList errors={fields.photoFile.errors} id={fields.photoFile.id} />\n        <div className=\"flex gap-4\">\n          {/*\n           We're doing some kinda odd things to make it so this works well\n           without JavaScript. Basically, we're using CSS to ensure the right\n           buttons show up based on the input's \"valid\" state (whether or not\n           an image has been selected). Progressive enhancement FTW!\n           */}\n          <input {...getInputProps(fields.photoFile, {\n          type: \"file\"\n        })} accept=\"image/*\" className=\"peer sr-only\" required tabIndex={newImageSrc ? -1 : 0} onChange={e => {\n          const file = e.currentTarget.files?.[0];\n          if (file) {\n            const reader = new FileReader();\n            reader.onload = event => {\n              setNewImageSrc(event.target?.result?.toString() ?? null);\n            };\n            reader.readAsDataURL(file);\n          }\n        }} />\n          <Button asChild className=\"cursor-pointer peer-valid:hidden peer-focus-within:ring-4 peer-focus-visible:ring-4\">\n            <label htmlFor={fields.photoFile.id}>\n              <Icon name=\"pencil-1\">Change</Icon>\n            </label>\n          </Button>\n          <StatusButton className=\"peer-invalid:hidden\" name=\"intent\" status={pendingIntent === \"submit\" ? \"pending\" : lastSubmissionIntent === \"submit\" ? form.status ?? \"idle\" : \"idle\"} type=\"submit\" value=\"submit\">\n            Save Photo\n          </StatusButton>\n          <Button className=\"peer-invalid:hidden\" variant=\"destructive\" {...form.reset.getButtonProps()}>\n            <Icon name=\"trash\">Reset</Icon>\n          </Button>\n          {data.user.image?.id ? <StatusButton className=\"peer-valid:hidden\" variant=\"destructive\" {...doubleCheckDeleteImage.getButtonProps({\n          type: \"submit\",\n          name: \"intent\",\n          value: \"delete\"\n        })} status={pendingIntent === \"delete\" ? \"pending\" : lastSubmissionIntent === \"delete\" ? form.status ?? \"idle\" : \"idle\"}>\n              <Icon name=\"trash\">\n                {doubleCheckDeleteImage.doubleCheck ? \"Are you sure?\" : \"Delete\"}\n              </Icon>\n            </StatusButton> : null}\n        </div>\n        <ErrorList errors={form.errors} />\n      </Form>\n    </div>;\n}\n_s(PhotoRoute, \"iHeSpgIHVoJLphdT2VOeEhrdia8=\", false, function () {\n  return [useLoaderData, useDoubleCheck, useActionData, useNavigation, useForm, useIsPending];\n});\n_c = PhotoRoute;\nvar _c;\n$RefreshReg$(_c, \"PhotoRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
