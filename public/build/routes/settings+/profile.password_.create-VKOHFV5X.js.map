{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.password_.create.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.password_.create.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.password_.create.tsx\");\n  import.meta.hot.lastModified = \"1713999579980.0132\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport { ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { Button } from \"#app/components/ui/button.tsx\";\nimport { Icon } from \"#app/components/ui/icon.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { getPasswordHash, requireUserId } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { useIsPending } from \"#app/utils/misc.tsx\";\nimport { PasswordAndConfirmPasswordSchema } from \"#app/utils/user-validation.ts\";\nexport const handle = {\n  breadcrumb: <Icon name=\"dots-horizontal\">Password</Icon>\n};\nconst CreatePasswordForm = PasswordAndConfirmPasswordSchema;\nasync function requireNoPassword(userId) {\n  const password = await prisma.password.findUnique({\n    select: {\n      userId: true\n    },\n    where: {\n      userId\n    }\n  });\n  if (password) {\n    throw redirect(\"/settings/profile/password\");\n  }\n}\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  await requireNoPassword(userId);\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  await requireNoPassword(userId);\n  const formData = await request.formData();\n  const submission = await parseWithZod(formData, {\n    async: true,\n    schema: CreatePasswordForm\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply({\n        hideFields: [\"password\", \"confirmPassword\"]\n      })\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    password\n  } = submission.value;\n  await prisma.user.update({\n    select: {\n      username: true\n    },\n    where: {\n      id: userId\n    },\n    data: {\n      password: {\n        create: {\n          hash: await getPasswordHash(password)\n        }\n      }\n    }\n  });\n  return redirect(`/settings/profile`, {\n    status: 302\n  });\n}\nexport default function CreatePasswordRoute() {\n  _s();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [form, fields] = useForm({\n    id: \"password-create-form\",\n    constraint: getZodConstraint(CreatePasswordForm),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: CreatePasswordForm\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <Form method=\"POST\" {...getFormProps(form)} className=\"mx-auto max-w-md\">\n      <Field errors={fields.password.errors} inputProps={{\n      ...getInputProps(fields.password, {\n        type: \"password\"\n      }),\n      autoComplete: \"new-password\"\n    }} labelProps={{\n      children: \"New Password\"\n    }} />\n      <Field errors={fields.confirmPassword.errors} inputProps={{\n      ...getInputProps(fields.confirmPassword, {\n        type: \"password\"\n      }),\n      autoComplete: \"new-password\"\n    }} labelProps={{\n      children: \"Confirm New Password\"\n    }} />\n      <ErrorList errors={form.errors} id={form.errorId} />\n      <div className=\"grid w-full grid-cols-2 gap-6\">\n        <Button asChild variant=\"secondary\">\n          <Link to=\"..\">Cancel</Link>\n        </Button>\n        <StatusButton status={isPending ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n          Create Password\n        </StatusButton>\n      </div>\n    </Form>;\n}\n_s(CreatePasswordRoute, \"qg6D+LQiyyBwoKKZlQs9OeApyZ8=\", false, function () {\n  return [useActionData, useIsPending, useForm];\n});\n_c = CreatePasswordRoute;\nvar _c;\n$RefreshReg$(_c, \"CreatePasswordRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,kBAA+B;AAM/B,yBAA+C;AAC/C,uBAAuB;AAIT;AAjCd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wDAA0D,EAAE;AAAA,EACrG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmD;AACnD,cAAY,IAAI,eAAe;AACjC;AAeO,IAAM,SAAS;AAAA,EACpB,YAAY,mDAAC,QAAK,MAAK,mBAAkB,wBAA7B;AAAA;AAAA;AAAA;AAAA,GAAqC;AACnD;AACA,IAAM,qBAAqB;AA8DZ,SAAR,sBAAuC;AAC5C,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,YAAY,aAAa;AAC/B,QAAM,CAAC,MAAM,MAAM,IAAI,QAAQ;AAAA,IAC7B,IAAI;AAAA,IACJ,YAAY,iBAAiB,kBAAkB;AAAA,IAC/C,YAAY,YAAY;AAAA,IACxB,WAAW;AAAA,MACT;AAAA,IACF,GAAG;AACD,aAAO,aAAa,UAAU;AAAA,QAC5B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,kBAAkB;AAAA,EACpB,CAAC;AACD,SAAO,mDAAC,QAAK,QAAO,QAAQ,GAAG,aAAa,IAAI,GAAG,WAAU,oBACzD;AAAA,uDAAC,SAAM,QAAQ,OAAO,SAAS,QAAQ,YAAY;AAAA,MACnD,GAAG,cAAc,OAAO,UAAU;AAAA,QAChC,MAAM;AAAA,MACR,CAAC;AAAA,MACD,cAAc;AAAA,IAChB,GAAG,YAAY;AAAA,MACb,UAAU;AAAA,IACZ,KAPE;AAAA;AAAA;AAAA;AAAA,WAOC;AAAA,IACD,mDAAC,SAAM,QAAQ,OAAO,gBAAgB,QAAQ,YAAY;AAAA,MAC1D,GAAG,cAAc,OAAO,iBAAiB;AAAA,QACvC,MAAM;AAAA,MACR,CAAC;AAAA,MACD,cAAc;AAAA,IAChB,GAAG,YAAY;AAAA,MACb,UAAU;AAAA,IACZ,KAPE;AAAA;AAAA;AAAA;AAAA,WAOC;AAAA,IACD,mDAAC,aAAU,QAAQ,KAAK,QAAQ,IAAI,KAAK,WAAzC;AAAA;AAAA;AAAA;AAAA,WAAkD;AAAA,IAClD,mDAAC,SAAI,WAAU,iCACb;AAAA,yDAAC,UAAO,SAAO,MAAC,SAAQ,aACtB,6DAAC,QAAK,IAAG,MAAK,sBAAd;AAAA;AAAA;AAAA;AAAA,aAAoB,KADtB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,gBAAa,QAAQ,YAAY,YAAY,KAAK,UAAU,QAAQ,MAAK,UAAS,+BAAnF;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAzBG;AAAA;AAAA;AAAA;AAAA,SA0BL;AACJ;AACA,GAAG,qBAAqB,gCAAgC,OAAO,WAAY;AACzE,SAAO,CAAC,eAAe,cAAc,OAAO;AAC9C,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,qBAAqB;AAEtC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
