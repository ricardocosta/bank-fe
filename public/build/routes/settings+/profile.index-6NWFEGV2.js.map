{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.index.tsx\");\n  import.meta.hot.lastModified = \"1713999832458.359\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { invariantResponse } from \"@epic-web/invariant\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useFetcher, useLoaderData } from \"@remix-run/react\";\nimport { z } from \"zod\";\nimport { ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { Button } from \"#app/components/ui/button.tsx\";\nimport { Icon } from \"#app/components/ui/icon.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { requireUserId, sessionKey } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { getUserImgSrc, useDoubleCheck } from \"#app/utils/misc.tsx\";\nimport { authSessionStorage } from \"#app/utils/session.server.ts\";\nimport { redirectWithToast } from \"#app/utils/toast.server.ts\";\nimport { NameSchema, UsernameSchema } from \"#app/utils/user-validation.ts\";\nconst ProfileFormSchema = z.object({\n  name: NameSchema.optional(),\n  username: UsernameSchema\n});\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const user = await prisma.user.findUniqueOrThrow({\n    where: {\n      id: userId\n    },\n    select: {\n      id: true,\n      name: true,\n      username: true,\n      email: true,\n      image: {\n        select: {\n          id: true\n        }\n      },\n      _count: {\n        select: {\n          sessions: {\n            where: {\n              expirationDate: {\n                gt: new Date()\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  const password = await prisma.password.findUnique({\n    select: {\n      userId: true\n    },\n    where: {\n      userId\n    }\n  });\n  return json({\n    user,\n    hasPassword: Boolean(password)\n  });\n}\nconst profileUpdateActionIntent = \"update-profile\";\nconst signOutOfSessionsActionIntent = \"sign-out-of-sessions\";\nconst deleteDataActionIntent = \"delete-data\";\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  switch (intent) {\n    case profileUpdateActionIntent:\n      {\n        return profileUpdateAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    case signOutOfSessionsActionIntent:\n      {\n        return signOutOfSessionsAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    case deleteDataActionIntent:\n      {\n        return deleteDataAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    default:\n      {\n        throw new Response(`Invalid intent \"${intent?.toString()}\"`, {\n          status: 400\n        });\n      }\n  }\n}\nexport default function EditUserProfile() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"flex flex-col gap-12\">\n      <div className=\"flex justify-center\">\n        <div className=\"relative h-52 w-52\">\n          <img alt={data.user.username} className=\"h-full w-full rounded-full object-cover\" src={getUserImgSrc(data.user.image?.id)} />\n          <Button asChild className=\"absolute -right-3 top-3 flex h-10 w-10 items-center justify-center rounded-full p-0\" variant=\"outline\">\n            <Link aria-label=\"Change profile photo\" preventScrollReset title=\"Change profile photo\" to=\"photo\">\n              <Icon className=\"h-4 w-4\" name=\"camera\" />\n            </Link>\n          </Button>\n        </div>\n      </div>\n      <UpdateProfile />\n\n      <div className=\"col-span-6 my-6 h-1 border-b-[1.5px] border-foreground\" />\n      <div className=\"col-span-full flex flex-col gap-6\">\n        <div>\n          <Link to=\"change-email\">\n            <Icon name=\"envelope-closed\">\n              Change email from {data.user.email}\n            </Icon>\n          </Link>\n        </div>\n        <div>\n          <Link to={data.hasPassword ? \"password\" : \"password/create\"}>\n            <Icon name=\"dots-horizontal\">\n              {data.hasPassword ? \"Change Password\" : \"Create a Password\"}\n            </Icon>\n          </Link>\n        </div>\n        <div>\n          <Link download=\"my-epic-notes-data.json\" reloadDocument to=\"/resources/download-user-data\">\n            <Icon name=\"download\">Download your data</Icon>\n          </Link>\n        </div>\n        <SignOutOfSessions />\n        <DeleteData />\n      </div>\n    </div>;\n}\n_s(EditUserProfile, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EditUserProfile;\nasync function profileUpdateAction({\n  userId,\n  formData\n}) {\n  const submission = await parseWithZod(formData, {\n    async: true,\n    schema: ProfileFormSchema.superRefine(async ({\n      username\n    }, ctx) => {\n      const existingUsername = await prisma.user.findUnique({\n        where: {\n          username\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUsername && existingUsername.id !== userId) {\n        ctx.addIssue({\n          path: [\"username\"],\n          code: z.ZodIssueCode.custom,\n          message: \"A user already exists with this username\"\n        });\n      }\n    })\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const data = submission.value;\n  await prisma.user.update({\n    select: {\n      username: true\n    },\n    where: {\n      id: userId\n    },\n    data: {\n      name: data.name,\n      username: data.username\n    }\n  });\n  return json({\n    result: submission.reply()\n  });\n}\nfunction UpdateProfile() {\n  _s2();\n  const data = useLoaderData();\n  const fetcher = useFetcher();\n  const [form, fields] = useForm({\n    id: \"edit-profile\",\n    constraint: getZodConstraint(ProfileFormSchema),\n    lastResult: fetcher.data?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: ProfileFormSchema\n      });\n    },\n    defaultValue: {\n      username: data.user.username,\n      name: data.user.name ?? \"\"\n    }\n  });\n  return <fetcher.Form method=\"POST\" {...getFormProps(form)}>\n      <div className=\"grid grid-cols-6 gap-x-10\">\n        <Field className=\"col-span-3\" errors={fields.username.errors} inputProps={getInputProps(fields.username, {\n        type: \"text\"\n      })} labelProps={{\n        htmlFor: fields.username.id,\n        children: \"Username\"\n      }} />\n        <Field className=\"col-span-3\" errors={fields.name.errors} inputProps={getInputProps(fields.name, {\n        type: \"text\"\n      })} labelProps={{\n        htmlFor: fields.name.id,\n        children: \"Name\"\n      }} />\n      </div>\n\n      <ErrorList errors={form.errors} id={form.errorId} />\n\n      <div className=\"mt-8 flex justify-center\">\n        <StatusButton name=\"intent\" size=\"wide\" status={fetcher.state !== \"idle\" ? \"pending\" : form.status ?? \"idle\"} type=\"submit\" value={profileUpdateActionIntent}>\n          Save changes\n        </StatusButton>\n      </div>\n    </fetcher.Form>;\n}\n_s2(UpdateProfile, \"UzvSjeKCTDMHQRJe2illLbG0AqY=\", false, function () {\n  return [useLoaderData, useFetcher, useForm];\n});\n_c2 = UpdateProfile;\nasync function signOutOfSessionsAction({\n  request,\n  userId\n}) {\n  const authSession = await authSessionStorage.getSession(request.headers.get(\"cookie\"));\n  const sessionId = authSession.get(sessionKey);\n  invariantResponse(sessionId, \"You must be authenticated to sign out of other sessions\");\n  await prisma.session.deleteMany({\n    where: {\n      userId,\n      id: {\n        not: sessionId\n      }\n    }\n  });\n  return json({\n    status: \"success\"\n  });\n}\nfunction SignOutOfSessions() {\n  _s3();\n  const data = useLoaderData();\n  const dc = useDoubleCheck();\n  const fetcher = useFetcher();\n  const otherSessionsCount = data.user._count.sessions - 1;\n  return <div>\n      {otherSessionsCount ? <fetcher.Form method=\"POST\">\n          <StatusButton {...dc.getButtonProps({\n        type: \"submit\",\n        name: \"intent\",\n        value: signOutOfSessionsActionIntent\n      })} status={fetcher.state !== \"idle\" ? \"pending\" : fetcher.data?.status ?? \"idle\"} variant={dc.doubleCheck ? \"destructive\" : \"default\"}>\n            <Icon name=\"avatar\">\n              {dc.doubleCheck ? `Are you sure?` : `Sign out of ${otherSessionsCount} other sessions`}\n            </Icon>\n          </StatusButton>\n        </fetcher.Form> : <Icon name=\"avatar\">This is your only session</Icon>}\n    </div>;\n}\n_s3(SignOutOfSessions, \"vGqH5veF3P6z3W7E3D5vXZ17b98=\", false, function () {\n  return [useLoaderData, useDoubleCheck, useFetcher];\n});\n_c3 = SignOutOfSessions;\nasync function deleteDataAction({\n  userId\n}) {\n  await prisma.user.delete({\n    where: {\n      id: userId\n    }\n  });\n  return redirectWithToast(\"/\", {\n    type: \"success\",\n    title: \"Data Deleted\",\n    description: \"All of your data has been deleted\"\n  });\n}\nfunction DeleteData() {\n  _s4();\n  const dc = useDoubleCheck();\n  const fetcher = useFetcher();\n  return <div>\n      <fetcher.Form method=\"POST\">\n        <StatusButton {...dc.getButtonProps({\n        type: \"submit\",\n        name: \"intent\",\n        value: deleteDataActionIntent\n      })} status={fetcher.state !== \"idle\" ? \"pending\" : \"idle\"} variant={dc.doubleCheck ? \"destructive\" : \"default\"}>\n          <Icon name=\"trash\">\n            {dc.doubleCheck ? `Are you sure?` : `Delete all your data`}\n          </Icon>\n        </StatusButton>\n      </fetcher.Form>\n    </div>;\n}\n_s4(DeleteData, \"vnFydE1DKgFCQD1o3M4b69zjfoU=\", false, function () {\n  return [useDoubleCheck, useFetcher];\n});\n_c4 = DeleteData;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EditUserProfile\");\n$RefreshReg$(_c2, \"UpdateProfile\");\n$RefreshReg$(_c3, \"SignOutOfSessions\");\n$RefreshReg$(_c4, \"DeleteData\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
