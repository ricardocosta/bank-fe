{
  "version": 3,
  "sources": ["../../../../app/routes/_auth+/forgot-password.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/forgot-password.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/forgot-password.tsx\");\n  import.meta.hot.lastModified = \"1714001844525.8142\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport * as E from \"@react-email/components\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Link, useFetcher } from \"@remix-run/react\";\nimport { HoneypotInputs } from \"remix-utils/honeypot/react\";\nimport { z } from \"zod\";\nimport { GeneralErrorBoundary } from \"#app/components/error-boundary.tsx\";\nimport { ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { sendEmail } from \"#app/utils/email.server.ts\";\nimport { checkHoneypot } from \"#app/utils/honeypot.server.ts\";\nimport { EmailSchema, UsernameSchema } from \"#app/utils/user-validation.ts\";\nimport { prepareVerification } from \"./verify.tsx\";\nconst ForgotPasswordSchema = z.object({\n  usernameOrEmail: z.union([EmailSchema, UsernameSchema])\n});\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  checkHoneypot(formData);\n  const submission = await parseWithZod(formData, {\n    schema: ForgotPasswordSchema.superRefine(async (data, ctx) => {\n      const user = await prisma.user.findFirst({\n        where: {\n          OR: [{\n            email: data.usernameOrEmail\n          }, {\n            username: data.usernameOrEmail\n          }]\n        },\n        select: {\n          id: true\n        }\n      });\n      if (!user) {\n        ctx.addIssue({\n          path: [\"usernameOrEmail\"],\n          code: z.ZodIssueCode.custom,\n          message: \"No user exists with this username or email\"\n        });\n        return;\n      }\n    }),\n    async: true\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    usernameOrEmail\n  } = submission.value;\n  const user = await prisma.user.findFirstOrThrow({\n    where: {\n      OR: [{\n        email: usernameOrEmail\n      }, {\n        username: usernameOrEmail\n      }]\n    },\n    select: {\n      email: true,\n      username: true\n    }\n  });\n  const {\n    verifyUrl,\n    redirectTo,\n    otp\n  } = await prepareVerification({\n    period: 10 * 60,\n    request,\n    type: \"reset-password\",\n    target: usernameOrEmail\n  });\n  const response = await sendEmail({\n    to: user.email,\n    subject: `Epic Notes Password Reset`,\n    react: <ForgotPasswordEmail onboardingUrl={verifyUrl.toString()} otp={otp} />\n  });\n  if (response.status === \"success\") {\n    return redirect(redirectTo.toString());\n  } else {\n    return json({\n      result: submission.reply({\n        formErrors: [response.error.message]\n      })\n    }, {\n      status: 500\n    });\n  }\n}\nfunction ForgotPasswordEmail({\n  onboardingUrl,\n  otp\n}) {\n  return <E.Html dir=\"ltr\" lang=\"en\">\n      <E.Container>\n        <h1>\n          <E.Text>Epic Notes Password Reset</E.Text>\n        </h1>\n        <p>\n          <E.Text>\n            {`Here's your verification code:`} <strong>{otp}</strong>\n          </E.Text>\n        </p>\n        <p>\n          <E.Text>Or click the link:</E.Text>\n        </p>\n        <E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n      </E.Container>\n    </E.Html>;\n}\n_c = ForgotPasswordEmail;\nexport const meta = () => {\n  return [{\n    title: \"Password Recovery for Epic Notes\"\n  }];\n};\nexport default function ForgotPasswordRoute() {\n  _s();\n  const forgotPassword = useFetcher();\n  const [form, fields] = useForm({\n    id: \"forgot-password-form\",\n    constraint: getZodConstraint(ForgotPasswordSchema),\n    lastResult: forgotPassword.data?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: ForgotPasswordSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <div className=\"container pb-32 pt-20\">\n      <div className=\"flex flex-col justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-h1\">Forgot Password</h1>\n          <p className=\"mt-3 text-body-md text-muted-foreground\">\n            {`No worries, we'll send you reset instructions.`}\n          </p>\n        </div>\n        <div className=\"mx-auto mt-16 min-w-[368px] max-w-sm\">\n          <forgotPassword.Form method=\"POST\" {...getFormProps(form)}>\n            <HoneypotInputs />\n            <div>\n              <Field errors={fields.usernameOrEmail.errors} inputProps={{\n              autoFocus: true,\n              ...getInputProps(fields.usernameOrEmail, {\n                type: \"text\"\n              })\n            }} labelProps={{\n              htmlFor: fields.usernameOrEmail.id,\n              children: \"Username or Email\"\n            }} />\n            </div>\n            <ErrorList errors={form.errors} id={form.errorId} />\n\n            <div className=\"mt-6\">\n              <StatusButton className=\"w-full\" disabled={forgotPassword.state !== \"idle\"} status={forgotPassword.state === \"submitting\" ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n                Recover password\n              </StatusButton>\n            </div>\n          </forgotPassword.Form>\n          <Link className=\"mt-11 text-center text-body-sm font-bold\" to=\"/login\">\n            Back to Login\n          </Link>\n        </div>\n      </div>\n    </div>;\n}\n_s(ForgotPasswordRoute, \"X2dFhDI9LNT9Wf5zf55NIkNQiO4=\", false, function () {\n  return [useFetcher, useForm];\n});\n_c2 = ForgotPasswordRoute;\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c3 = ErrorBoundary;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ForgotPasswordEmail\");\n$RefreshReg$(_c2, \"ForgotPasswordRoute\");\n$RefreshReg$(_c3, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,kBAA+B;AAO/B,uBAAuB;AACvB,0BAA0B;AAC1B,6BAA8B;AAwEnB;AAxGX,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4CAA8C,EAAE;AAAA,EACzF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuC;AACvC,cAAY,IAAI,eAAe;AACjC;AAkBA,IAAM,uBAAuB,EAAE,OAAO;AAAA,EACpC,iBAAiB,EAAE,MAAM,CAAC,aAAa,cAAc,CAAC;AACxD,CAAC;AAiFD,SAAS,oBAAoB;AAAA,EAC3B;AAAA,EACA;AACF,GAAG;AACD,SAAO,mDAAG,MAAF,EAAO,KAAI,OAAM,MAAK,MAC1B,6DAAG,WAAF,EACC;AAAA,uDAAC,QACC,6DAAG,MAAF,EAAO,yCAAR;AAAA;AAAA;AAAA;AAAA,WAAiC,KADnC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,OACC,6DAAG,MAAF,EACE;AAAA;AAAA,MAAiC;AAAA,MAAC,mDAAC,YAAQ,iBAAT;AAAA;AAAA;AAAA;AAAA,aAAa;AAAA,SADlD;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,OACC,6DAAG,MAAF,EAAO,kCAAR;AAAA;AAAA;AAAA;AAAA,WAA0B,KAD5B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAGA,OAAF,EAAO,MAAM,eAAgB,2BAA9B;AAAA;AAAA;AAAA;AAAA,WAA4C;AAAA,OAZ9C;AAAA;AAAA;AAAA;AAAA,SAaA,KAdG;AAAA;AAAA;AAAA;AAAA,SAeL;AACJ;AACA,KAAK;AACE,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AACe,SAAR,sBAAuC;AAC5C,KAAG;AACH,QAAM,iBAAiB,WAAW;AAClC,QAAM,CAAC,MAAM,MAAM,IAAI,QAAQ;AAAA,IAC7B,IAAI;AAAA,IACJ,YAAY,iBAAiB,oBAAoB;AAAA,IACjD,YAAY,eAAe,MAAM;AAAA,IACjC,WAAW;AAAA,MACT;AAAA,IACF,GAAG;AACD,aAAO,aAAa,UAAU;AAAA,QAC5B,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,kBAAkB;AAAA,EACpB,CAAC;AACD,SAAO,mDAAC,SAAI,WAAU,yBAClB,6DAAC,SAAI,WAAU,gCACb;AAAA,uDAAC,SAAI,WAAU,eACb;AAAA,yDAAC,QAAG,WAAU,WAAU,+BAAxB;AAAA;AAAA;AAAA;AAAA,aAAuC;AAAA,MACvC,mDAAC,OAAE,WAAU,2CACV,8DADH;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,SAAI,WAAU,wCACb;AAAA,yDAAC,eAAe,MAAf,EAAoB,QAAO,QAAQ,GAAG,aAAa,IAAI,GACtD;AAAA,2DAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,eAAgB;AAAA,QAChB,mDAAC,SACC,6DAAC,SAAM,QAAQ,OAAO,gBAAgB,QAAQ,YAAY;AAAA,UAC1D,WAAW;AAAA,UACX,GAAG,cAAc,OAAO,iBAAiB;AAAA,YACvC,MAAM;AAAA,UACR,CAAC;AAAA,QACH,GAAG,YAAY;AAAA,UACb,SAAS,OAAO,gBAAgB;AAAA,UAChC,UAAU;AAAA,QACZ,KARE;AAAA;AAAA;AAAA;AAAA,eAQC,KATH;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,mDAAC,aAAU,QAAQ,KAAK,QAAQ,IAAI,KAAK,WAAzC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAElD,mDAAC,SAAI,WAAU,QACb,6DAAC,gBAAa,WAAU,UAAS,UAAU,eAAe,UAAU,QAAQ,QAAQ,eAAe,UAAU,eAAe,YAAY,KAAK,UAAU,QAAQ,MAAK,UAAS,gCAA7K;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,WAnBF;AAAA;AAAA;AAAA;AAAA,aAoBA;AAAA,MACA,mDAAC,QAAK,WAAU,4CAA2C,IAAG,UAAS,6BAAvE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,OAhCF;AAAA;AAAA;AAAA;AAAA,SAiCA,KAlCG;AAAA;AAAA;AAAA;AAAA,SAmCL;AACJ;AACA,GAAG,qBAAqB,gCAAgC,OAAO,WAAY;AACzE,SAAO,CAAC,YAAY,OAAO;AAC7B,CAAC;AACD,MAAM;AACC,SAAS,gBAAgB;AAC9B,SAAO,mDAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,SAAsB;AAC/B;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AAAR,IAAa;AACb,aAAa,IAAI,qBAAqB;AACtC,aAAa,KAAK,qBAAqB;AACvC,aAAa,KAAK,eAAe;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["Link"]
}
