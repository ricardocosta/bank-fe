{
  "version": 3,
  "sources": ["../../../../app/routes/_auth+/signup.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/signup.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/signup.tsx\");\n  import.meta.hot.lastModified = \"1714001100996.8757\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport * as E from \"@react-email/components\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { HoneypotInputs } from \"remix-utils/honeypot/react\";\nimport { z } from \"zod\";\nimport { GeneralErrorBoundary } from \"#app/components/error-boundary.tsx\";\nimport { ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { sendEmail } from \"#app/utils/email.server.ts\";\nimport { checkHoneypot } from \"#app/utils/honeypot.server.ts\";\nimport { useIsPending } from \"#app/utils/misc.tsx\";\nimport { EmailSchema } from \"#app/utils/user-validation.ts\";\nimport { prepareVerification } from \"./verify.tsx\";\nconst SignupSchema = z.object({\n  email: EmailSchema\n});\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  checkHoneypot(formData);\n  const submission = await parseWithZod(formData, {\n    schema: SignupSchema.superRefine(async (data, ctx) => {\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          email: data.email\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUser) {\n        ctx.addIssue({\n          path: [\"email\"],\n          code: z.ZodIssueCode.custom,\n          message: \"A user already exists with this email\"\n        });\n        return;\n      }\n    }),\n    async: true\n  });\n  if (submission.status !== \"success\") {\n    return json({\n      result: submission.reply()\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    email\n  } = submission.value;\n  const {\n    verifyUrl,\n    redirectTo,\n    otp\n  } = await prepareVerification({\n    period: 10 * 60,\n    request,\n    type: \"onboarding\",\n    target: email\n  });\n  const response = await sendEmail({\n    to: email,\n    subject: `Welcome to Epic Notes!`,\n    react: <SignupEmail onboardingUrl={verifyUrl.toString()} otp={otp} />\n  });\n  if (response.status === \"success\") {\n    return redirect(redirectTo.toString());\n  } else {\n    return json({\n      result: submission.reply({\n        formErrors: [response.error.message]\n      })\n    }, {\n      status: 500\n    });\n  }\n}\nexport function SignupEmail({\n  onboardingUrl,\n  otp\n}) {\n  return <E.Html dir=\"ltr\" lang=\"en\">\n      <E.Container>\n        <h1>\n          <E.Text>Welcome to Epic Notes!</E.Text>\n        </h1>\n        <p>\n          <E.Text>\n            {`Here's your verification code:`} <strong>{otp}</strong>\n          </E.Text>\n        </p>\n        <p>\n          <E.Text>Or click the link to get started:</E.Text>\n        </p>\n        <E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n      </E.Container>\n    </E.Html>;\n}\n_c = SignupEmail;\nexport const meta = () => {\n  return [{\n    title: \"Sign Up | Epic Notes\"\n  }];\n};\nexport default function SignupRoute() {\n  _s();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [form, fields] = useForm({\n    id: \"signup-form\",\n    constraint: getZodConstraint(SignupSchema),\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: SignupSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <div className=\"container flex flex-col justify-center pb-32 pt-20\">\n      <div className=\"text-center\">\n        <h1 className=\"text-h1\">{`Let's start your journey!`}</h1>\n        <p className=\"mt-3 text-body-md text-muted-foreground\">\n          Please enter your email.\n        </p>\n      </div>\n      <div className=\"mx-auto mt-16 min-w-[368px] max-w-sm\">\n        <Form method=\"POST\" {...getFormProps(form)}>\n          <HoneypotInputs />\n          <Field errors={fields.email.errors} inputProps={{\n          ...getInputProps(fields.email, {\n            type: \"email\"\n          }),\n          autoFocus: true,\n          autoComplete: \"email\"\n        }} labelProps={{\n          htmlFor: fields.email.id,\n          children: \"Email\"\n        }} />\n          <ErrorList errors={form.errors} id={form.errorId} />\n          <StatusButton className=\"w-full\" disabled={isPending} status={isPending ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n            Submit\n          </StatusButton>\n        </Form>\n      </div>\n    </div>;\n}\n_s(SignupRoute, \"qg6D+LQiyyBwoKKZlQs9OeApyZ8=\", false, function () {\n  return [useActionData, useIsPending, useForm];\n});\n_c2 = SignupRoute;\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c3 = ErrorBoundary;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SignupEmail\");\n$RefreshReg$(_c2, \"SignupRoute\");\n$RefreshReg$(_c3, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
