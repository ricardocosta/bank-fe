{
  "version": 3,
  "sources": ["../../../../app/routes/_auth+/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/login.tsx\");\n  import.meta.hot.lastModified = \"1714001704733.9792\";\n}\n// REMIX HMR END\n\nimport { getFormProps, getInputProps, useForm } from \"@conform-to/react\";\nimport { getZodConstraint, parseWithZod } from \"@conform-to/zod\";\nimport { invariant } from \"@epic-web/invariant\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { HoneypotInputs } from \"remix-utils/honeypot/react\";\nimport { safeRedirect } from \"remix-utils/safe-redirect\";\nimport { z } from \"zod\";\nimport { GeneralErrorBoundary } from \"#app/components/error-boundary.tsx\";\nimport { CheckboxField, ErrorList, Field } from \"#app/components/forms.tsx\";\nimport { Spacer } from \"#app/components/spacer.tsx\";\nimport { StatusButton } from \"#app/components/ui/status-button.tsx\";\nimport { login, requireAnonymous, sessionKey } from \"#app/utils/auth.server.ts\";\nimport { prisma } from \"#app/utils/db/db.server.ts\";\nimport { checkHoneypot } from \"#app/utils/honeypot.server.ts\";\nimport { combineResponseInits, useIsPending } from \"#app/utils/misc.tsx\";\nimport { authSessionStorage } from \"#app/utils/session.server.ts\";\nimport { redirectWithToast } from \"#app/utils/toast.server.ts\";\nimport { PasswordSchema, UsernameSchema } from \"#app/utils/user-validation.ts\";\nimport { verifySessionStorage } from \"#app/utils/verification.server.ts\";\nexport const verifiedTimeKey = \"verified-time\";\nexport const unverifiedSessionIdKey = \"unverified-session-id\";\nexport const rememberKey = \"remember\";\nexport async function handleNewSession({\n  request,\n  session,\n  redirectTo,\n  remember\n}, responseInit) {\n  const authSession = await authSessionStorage.getSession(request.headers.get(\"cookie\"));\n  authSession.set(sessionKey, session.id);\n  return redirect(safeRedirect(redirectTo), combineResponseInits({\n    headers: {\n      \"set-cookie\": await authSessionStorage.commitSession(authSession, {\n        expires: remember ? session.expirationDate : undefined\n      })\n    }\n  }, responseInit));\n}\nexport async function handleVerification({\n  request,\n  submission\n}) {\n  invariant(submission.status === \"success\", \"Submission should be successful by now\");\n  const authSession = await authSessionStorage.getSession(request.headers.get(\"cookie\"));\n  const verifySession = await verifySessionStorage.getSession(request.headers.get(\"cookie\"));\n  const remember = verifySession.get(rememberKey);\n  const {\n    redirectTo\n  } = submission.value;\n  const headers = new Headers();\n  authSession.set(verifiedTimeKey, Date.now());\n  const unverifiedSessionId = verifySession.get(unverifiedSessionIdKey);\n  if (unverifiedSessionId) {\n    const session = await prisma.session.findUnique({\n      select: {\n        expirationDate: true\n      },\n      where: {\n        id: unverifiedSessionId\n      }\n    });\n    if (!session) {\n      throw await redirectWithToast(\"/login\", {\n        type: \"error\",\n        title: \"Invalid session\",\n        description: \"Could not find session to verify. Please try again.\"\n      });\n    }\n    authSession.set(sessionKey, unverifiedSessionId);\n    headers.append(\"set-cookie\", await authSessionStorage.commitSession(authSession, {\n      expires: remember ? session.expirationDate : undefined\n    }));\n  } else {\n    headers.append(\"set-cookie\", await authSessionStorage.commitSession(authSession));\n  }\n  headers.append(\"set-cookie\", await verifySessionStorage.destroySession(verifySession));\n  return redirect(safeRedirect(redirectTo), {\n    headers\n  });\n}\nconst LoginFormSchema = z.object({\n  username: UsernameSchema,\n  password: PasswordSchema,\n  redirectTo: z.string().optional(),\n  remember: z.boolean().default(false)\n});\nexport async function loader({\n  request\n}) {\n  await requireAnonymous(request);\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  await requireAnonymous(request);\n  const formData = await request.formData();\n  checkHoneypot(formData);\n  const submission = await parseWithZod(formData, {\n    schema: intent => LoginFormSchema.transform(async (data, ctx) => {\n      if (intent !== null) {\n        return {\n          ...data,\n          session: null\n        };\n      }\n      const session = await login(data);\n      if (!session) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: \"Invalid username or password\"\n        });\n        return z.NEVER;\n      }\n      return {\n        ...data,\n        session\n      };\n    }),\n    async: true\n  });\n  if (submission.status !== \"success\" || !submission.value.session) {\n    return json({\n      result: submission.reply({\n        hideFields: [\"password\"]\n      })\n    }, {\n      status: submission.status === \"error\" ? 400 : 200\n    });\n  }\n  const {\n    session,\n    remember,\n    redirectTo\n  } = submission.value;\n  return handleNewSession({\n    request,\n    session,\n    remember: remember ?? false,\n    redirectTo\n  });\n}\nexport default function LoginPage() {\n  _s();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\");\n  const [form, fields] = useForm({\n    id: \"login-form\",\n    constraint: getZodConstraint(LoginFormSchema),\n    defaultValue: {\n      redirectTo\n    },\n    lastResult: actionData?.result,\n    onValidate({\n      formData\n    }) {\n      return parseWithZod(formData, {\n        schema: LoginFormSchema\n      });\n    },\n    shouldRevalidate: \"onBlur\"\n  });\n  return <div className=\"flex min-h-full w-full flex-col justify-center pb-32 pt-20\">\n      <div className=\"mx-auto w-full max-w-md\">\n        <div className=\"flex flex-col gap-3 text-center\">\n          <h1 className=\"text-h1\">Welcome back!</h1>\n          <p className=\"text-body-md text-muted-foreground\">\n            Please enter your details.\n          </p>\n        </div>\n        <Spacer size=\"xs\" />\n\n        <div>\n          <div className=\"mx-auto w-full max-w-md px-8\">\n            <Form method=\"POST\" {...getFormProps(form)}>\n              <HoneypotInputs />\n              <Field errors={fields.username.errors} inputProps={{\n              ...getInputProps(fields.username, {\n                type: \"text\"\n              }),\n              autoFocus: true,\n              className: \"lowercase\",\n              autoComplete: \"username\"\n            }} labelProps={{\n              children: \"Username\"\n            }} />\n\n              <Field errors={fields.password.errors} inputProps={{\n              ...getInputProps(fields.password, {\n                type: \"password\"\n              }),\n              autoComplete: \"current-password\"\n            }} labelProps={{\n              children: \"Password\"\n            }} />\n\n              <div className=\"flex justify-between\">\n                <CheckboxField\n              // @ts-expect-error Radix Checkbox requires <button />-specific 'type' but conform returns broader `<input />-type`.\n              buttonProps={getInputProps(fields.remember, {\n                type: \"checkbox\"\n              })} errors={fields.remember.errors} labelProps={{\n                htmlFor: fields.remember.id,\n                children: \"Remember me\"\n              }} />\n                <div>\n                  <Link className=\"text-body-xs font-semibold\" to=\"/forgot-password\">\n                    Forgot password?\n                  </Link>\n                </div>\n              </div>\n\n              <input {...getInputProps(fields.redirectTo, {\n              type: \"hidden\"\n            })} />\n              <ErrorList errors={form.errors} id={form.errorId} />\n\n              <div className=\"flex items-center justify-between gap-6 pt-3\">\n                <StatusButton className=\"w-full\" disabled={isPending} status={isPending ? \"pending\" : form.status ?? \"idle\"} type=\"submit\">\n                  Log in\n                </StatusButton>\n              </div>\n            </Form>\n\n            <div className=\"flex items-center justify-center gap-2 pt-6\">\n              <span className=\"text-muted-foreground\">New here?</span>\n              <Link to={redirectTo ? `/signup?${encodeURIComponent(redirectTo)}` : \"/signup\"}>\n                Create an account\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>;\n}\n_s(LoginPage, \"pOytQzQfSlfERSUoCdV/IF0+RIo=\", false, function () {\n  return [useActionData, useIsPending, useSearchParams, useForm];\n});\n_c = LoginPage;\nexport const meta = () => {\n  return [{\n    title: \"Login to Epic Notes\"\n  }];\n};\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c2 = ErrorBoundary;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginPage\");\n$RefreshReg$(_c2, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
